# Never actually got this working in bash the special characters were causing lenght issues.
if [ ${ZSH_VERSION} ]; then
    ### Git [±master ▾●]
    GIT_PROMPT_PREFIX="[%F{green}±%F{white}"
    GIT_PROMPT_SUFFIX="%F{white}]"
    GIT_PROMPT_CLEAN="%F{green}✓%F{white}"
    GIT_PROMPT_AHEAD="%F{cyan}▴%F{whtie}"
    GIT_PROMPT_BEHIND="%F{magenta}▾%F{white}"
    GIT_PROMPT_STAGED="%F{green}●%F{white}"
    GIT_PROMPT_UNSTAGED="%F{yellow}●%F{white}"
    GIT_PROMPT_UNTRACKED="%F{red}●%F{white}"
    GIT_PROMPT_STASHED="(%F{blue}✹%F{white})"

    git_info ()
    {
        local ref
        ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
        ref=$(command git rev-parse --short HEAD 2> /dev/null) || return
        echo "${ref#refs/heads/}"
    }

    git_status()
    {
        local result gitstatus
        gitstatus="$(command git status --porcelain -b 2>/dev/null)"

        # check status of files
        local gitfiles="$(tail -n +2 <<< "$gitstatus")"
        if [[ -n "$gitfiles" ]]; then
            if [[ "$gitfiles" =~ $'(^|\n)[AMRD]. ' ]]; then
                result+="$GIT_PROMPT_STAGED"
            fi
            if [[ "$gitfiles" =~ $'(^|\n).[MTD] ' ]]; then
                result+="$GIT_PROMPT_UNSTAGED"
            fi
            if [[ "$gitfiles" =~ $'(^|\n)\\?\\? ' ]]; then
                result+="$GIT_PROMPT_UNTRACKED"
            fi
            if [[ "$gitfiles" =~ $'(^|\n)UU ' ]]; then
                result+="$GIT_PROMPT_UNMERGED"
            fi
        else
            result+="$GIT_PROMPT_CLEAN"
        fi

        # check status of local repository
        local gitbranch="$(head -n 1 <<< "$gitstatus")"
        if [[ "$gitbranch" =~ '^## .*ahead' ]]; then
            result+="$GIT_PROMPT_AHEAD"
        fi
        if [[ "$gitbranch" =~ '^## .*behind' ]]; then
            result+="$GIT_PROMPT_BEHIND"
        fi
        if [[ "$gitbranch" =~ '^## .*diverged' ]]; then
            result+="$GIT_PROMPT_DIVERGED"
        fi

        # check if there are stashed changes
        if command git rev-parse --verify refs/stash &> /dev/null; then
            result+="$GIT_PROMPT_STASHED"
        fi

        echo $result
    }


    git_prompt()
    {
        # ignore non git folders and hidden repos (adapted from lib/git.zsh)
        if ! command git rev-parse --git-dir &> /dev/null \
            || [[ "$(command git config --get oh-my-zsh.hide-info 2>/dev/null)" == 1 ]]; then
            return
        fi
        # check git information
        local gitinfo=$(git_info)
        if [[ -z "$gitinfo" ]]; then
            return
        fi

        # quote % in git information
        local output="${gitinfo:gs/%/%%}"

        # check git status
        local gitstatus=$(git_status)
        if [[ -n "$gitstatus" ]]; then
            output+=" $gitstatus"
        fi

        echo "${GIT_PROMPT_PREFIX}${output}${GIT_PROMPT_SUFFIX}"
    }
elif [ ${BASH_VERSION} ]; then
    ### Git [±master ▾●]
    GIT_PROMPT_PREFIX="[${GREEN}±${WHITE}"
    GIT_PROMPT_SUFFIX="${WHITE}]"
    GIT_PROMPT_CLEAN="${GREEN}✓${WHITE}"
    GIT_PROMPT_AHEAD="${CYAN}▴${WHITE}"
    GIT_PROMPT_BEHIND="${MAGENTA}▾${WHITE}"
    GIT_PROMPT_STAGED="${GREEN}●${WHITE}"
    GIT_PROMPT_UNSTAGED="${YELLOW}●${WHITE}"
    GIT_PROMPT_UNTRACKED="${RED}●${WHTIE}"
    GIT_PROMPT_STASHED="${WHITE}(${BLUE}✹${WHITE})"

    git_info ()
    {
        local ref
        ref=$(git symbolic-ref HEAD 2> /dev/null) || \
        ref=$(git rev-parse --short HEAD 2> /dev/null) || return
        echo "${ref#refs/heads/}"
    }

    git_status()
    {
        local result gitstatus
        gitstatus="$(command git status --porcelain -b 2>/dev/null)"

        # check status of files
        gitfiles="$(tail -n +2 <<< "$gitstatus")"
        if [[ -n "$gitfiles" ]]; then
            if [[ "$gitfiles" =~ (^|\n)[AMRD].  ]]; then
                result+="$GIT_PROMPT_STAGED"
            fi
            if [[ "$gitfiles" =~ (^|\n).[MTD]  ]]; then
                result+="$GIT_PROMPT_UNSTAGED"
            fi
            if [[ "$gitfiles" =~ (^|\n)\\?\\?  ]]; then
                result+="$GIT_PROMPT_UNTRACKED"
            fi
            if [[ "$gitfiles" =~ (^|\n)UU  ]]; then
                result+="$GIT_PROMPT_UNMERGED"
            fi
        else
            result+="$GIT_PROMPT_CLEAN"
        fi

        # check status of local repository
        local gitbranch="$(head -n 1 <<< "$gitstatus")"
        if [[ "$gitbranch" =~ '^## .*ahead' ]]; then
            result+="$GIT_PROMPT_AHEAD"
        fi
        if [[ "$gitbranch" =~ '^## .*behind' ]]; then
            result+="$GIT_PROMPT_BEHIND"
        fi
        if [[ "$gitbranch" =~ '^## .*diverged' ]]; then
            result+="$GIT_PROMPT_DIVERGED"
        fi

        # check if there are stashed changes
        if command git rev-parse --verify refs/stash &> /dev/null; then
            result+="$GIT_PROMPT_STASHED"
        fi

        #echo -e $result
        echo -e "HI"
    }


    git_prompt()
    {
        # ignore non git folders and hidden repos (adapted from lib/git.zsh)
        if ! command git rev-parse --git-dir &> /dev/null \
            || [[ "$(command git config --get oh-my-zsh.hide-info 2>/dev/null)" == 1 ]]; then
            return
        fi
        # check git information
        local gitinfo=$(git_info)
        if [[ -z "$gitinfo" ]]; then
            return
        fi

        # quote % in git information
        local output="${gitinfo//%/%%}"

        # check git status
        local gitstatus=$(git_status)
        if [[ -n "$gitstatus" ]]; then
            output+=" $gitstatus"
        fi

        echo -e "${GIT_PROMPT_PREFIX}${output}${GIT_PROMPT_SUFFIX}"
    }

    git_prompt_length()
    {
        local colorless="$(echo "$(git_prompt)" | sed "s,\x1b\[[0-9;]*[mG],,g")"
        local a=${#colorless}
        echo -e $a

    }

# RPROMPT Works but special characters mess up lengths.
#PS1="\[$(printf "%$((a=$(git_prompt_length), x=${COLUMNS}, ${COLUMNS} - ${a}))s$(git_prompt)\r" "")\]"$PS1
#PS1="\[$(printf "%$((a=$(git_prompt_length), x=${COLUMNS}, ${COLUMNS}-${#a}))s$(git_prompt)\r" "")\]"$PS1
#

# Special characters in echo/print causing invisible thing in ps1
#print_prompt()
#{
#    local a=$(git_prompt_length)
#    local tmp=""
#    local pad=$((${COLUMNS} - ${a}))
#    for ((i=1;i<60;i++)); do
#        tmp+=" "
#    done
#    tmp+=$(git_prompt)
#    echo -en "\033[s"
#    #printf "%$((${COLUMNS} - ${a}))s$(git_prompt)" " "
#    #echo ${tmp}
#    echo -en "                                                                     $(git_prompt)"
#    echo -en "\033[u"
#}
fi
